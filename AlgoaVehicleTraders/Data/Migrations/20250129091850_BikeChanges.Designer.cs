// <auto-generated />
using System;
using AlgoaVehicleTraders.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AlgoaVehicleTraders.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250129091850_BikeChanges")]
    partial class BikeChanges
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AlgoaVehicleTraders.Models.All.BedType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("BedTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("BedType");
                });

            modelBuilder.Entity("AlgoaVehicleTraders.Models.All.BikeBrand", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("BikeBrand");
                });

            modelBuilder.Entity("AlgoaVehicleTraders.Models.All.BikeType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("BikeTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("BikeType");
                });

            modelBuilder.Entity("AlgoaVehicleTraders.Models.All.BoatBrand", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("BoatBrand");
                });

            modelBuilder.Entity("AlgoaVehicleTraders.Models.All.BoatEngine", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("BoatEngine");
                });

            modelBuilder.Entity("AlgoaVehicleTraders.Models.All.BoatType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("BoatTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("BoatType");
                });

            modelBuilder.Entity("AlgoaVehicleTraders.Models.All.Brand", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Brand");
                });

            modelBuilder.Entity("AlgoaVehicleTraders.Models.All.CaravanBrand", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("CaravanBrand");
                });

            modelBuilder.Entity("AlgoaVehicleTraders.Models.All.CaravanType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CaravanTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("CaravanType");
                });

            modelBuilder.Entity("AlgoaVehicleTraders.Models.All.CompanyDetails", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeveloperEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FacebookLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstagramLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VATNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("CompanyDetails");
                });

            modelBuilder.Entity("AlgoaVehicleTraders.Models.All.DriveTrain", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("DriveTrainName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("DriveTrain");
                });

            modelBuilder.Entity("AlgoaVehicleTraders.Models.All.FuelType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("FuelTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("FuelType");
                });

            modelBuilder.Entity("AlgoaVehicleTraders.Models.All.Status", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("StatusDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Status");
                });

            modelBuilder.Entity("AlgoaVehicleTraders.Models.All.Transmission", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("TransmissionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Transmission");
                });

            modelBuilder.Entity("AlgoaVehicleTraders.Models.All.Type", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Type");
                });

            modelBuilder.Entity("AlgoaVehicleTraders.Models.All.WaterDepth", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("WaterDepthName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("WaterDepth");
                });

            modelBuilder.Entity("AlgoaVehicleTraders.Models.Bikes.Bike", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("Brand")
                        .HasColumnType("int");

                    b.Property<string>("Colour")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasColumnType("VARCHAR(MAX)");

                    b.Property<string>("EngineSize")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FuelType")
                        .HasColumnType("int");

                    b.Property<int>("Mileage")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StatusChangeDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Transmission")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Bike");
                });

            modelBuilder.Entity("AlgoaVehicleTraders.Models.Bikes.BikeAdditional", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("BikeID")
                        .HasColumnType("int");

                    b.Property<bool>("CenterStand")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Exterior1")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("Exterior2")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("Exterior3")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("Exterior4")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("Exterior5")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("Exterior6")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("HeatedGrips")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Interior1")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("Interior2")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("Interior3")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("Interior4")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("OffRoadCapable")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Other1")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("Other2")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("Panniers")
                        .HasColumnType("bit");

                    b.Property<bool>("RaisedScreen")
                        .HasColumnType("bit");

                    b.Property<bool>("TopBox")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.ToTable("BikeAdditional");
                });

            modelBuilder.Entity("AlgoaVehicleTraders.Models.Boats.Boat", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("Brand")
                        .HasColumnType("int");

                    b.Property<string>("Colour")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ConsoleLocation")
                        .HasColumnType("int");

                    b.Property<string>("Engine")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FuelType")
                        .HasColumnType("int");

                    b.Property<int>("Mileage")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StatusChangeDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Transmission")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Boat");
                });

            modelBuilder.Entity("AlgoaVehicleTraders.Models.Boats.BoatAdditional", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("BoatID")
                        .HasColumnType("int");

                    b.Property<bool>("BuoyancyCertificate")
                        .HasColumnType("bit");

                    b.Property<bool>("COF")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Exterior1")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("Exterior2")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("Exterior3")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("Exterior4")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("Exterior5")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("Exterior6")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("FishFinder")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Interior1")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("Interior2")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("Interior3")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("Interior4")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("LifeJackets")
                        .HasColumnType("bit");

                    b.Property<bool>("LiveWell")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Other1")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("Other2")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("RegisteredTrailer")
                        .HasColumnType("bit");

                    b.Property<bool>("SafetyEquipment")
                        .HasColumnType("bit");

                    b.Property<bool>("SkiTower")
                        .HasColumnType("bit");

                    b.Property<bool>("VhfRadio")
                        .HasColumnType("bit");

                    b.Property<int>("WaterDepth")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("BoatAdditional");
                });

            modelBuilder.Entity("AlgoaVehicleTraders.Models.Caravans.Caravan", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("BathroomHas")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BedType")
                        .HasColumnType("int");

                    b.Property<int>("Berth")
                        .HasColumnType("int");

                    b.Property<int>("Brand")
                        .HasColumnType("int");

                    b.Property<string>("Colour")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KitchenHas")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StatusChangeDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Caravan");
                });

            modelBuilder.Entity("AlgoaVehicleTraders.Models.Caravans.CaravanAdditional", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("Add_A_Room")
                        .HasColumnType("bit");

                    b.Property<bool>("Awning")
                        .HasColumnType("bit");

                    b.Property<bool>("CaravanCover")
                        .HasColumnType("bit");

                    b.Property<int>("CaravanID")
                        .HasColumnType("int");

                    b.Property<byte[]>("Exterior1")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("Exterior2")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("Exterior3")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("Exterior4")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("Exterior5")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("Exterior6")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("FullServiceHistory")
                        .HasColumnType("bit");

                    b.Property<bool>("Geyser")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Interior1")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("Interior2")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("Interior3")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("Interior4")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("Movers")
                        .HasColumnType("bit");

                    b.Property<bool>("MultiRoom")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Other1")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("Other2")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("SpareKey")
                        .HasColumnType("bit");

                    b.Property<bool>("SpareTyre")
                        .HasColumnType("bit");

                    b.Property<bool>("WaterTank")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.ToTable("CaravanAdditional");
                });

            modelBuilder.Entity("AlgoaVehicleTraders.Models.Cars.Car", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("Brand")
                        .HasColumnType("int");

                    b.Property<string>("Colour")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasColumnType("VARCHAR(MAX)");

                    b.Property<int>("DriveTrain")
                        .HasColumnType("int");

                    b.Property<string>("EngineSize")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FuelType")
                        .HasColumnType("int");

                    b.Property<int>("Mileage")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StatusChangeDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Transmission")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Car");
                });

            modelBuilder.Entity("AlgoaVehicleTraders.Models.Cars.CarAdditional", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("AC")
                        .HasColumnType("bit");

                    b.Property<bool>("Alarm")
                        .HasColumnType("bit");

                    b.Property<int>("CarID")
                        .HasColumnType("int");

                    b.Property<bool>("CentralLocking")
                        .HasColumnType("bit");

                    b.Property<bool>("ElectricMirrors")
                        .HasColumnType("bit");

                    b.Property<int>("ElectricWindows")
                        .HasColumnType("int");

                    b.Property<byte[]>("Exterior1")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("Exterior2")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("Exterior3")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("Exterior4")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("Exterior5")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("Exterior6")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("HeatedSeats")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Interior1")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("Interior2")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("Interior3")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("Interior4")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("LeatherSeats")
                        .HasColumnType("bit");

                    b.Property<bool>("MultiFunctionSteerWheel")
                        .HasColumnType("bit");

                    b.Property<int>("NumberDoors")
                        .HasColumnType("int");

                    b.Property<int>("NumberSeats")
                        .HasColumnType("int");

                    b.Property<byte[]>("Other1")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("Other2")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("ParkDistanceControl")
                        .HasColumnType("bit");

                    b.Property<bool>("PowerSteering")
                        .HasColumnType("bit");

                    b.Property<bool>("Radio")
                        .HasColumnType("bit");

                    b.Property<bool>("ReverseCamera")
                        .HasColumnType("bit");

                    b.Property<bool>("SpareKey")
                        .HasColumnType("bit");

                    b.Property<bool>("SpeedControl")
                        .HasColumnType("bit");

                    b.Property<bool>("Sunroof")
                        .HasColumnType("bit");

                    b.Property<bool>("TowBar")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.ToTable("CarAdditional");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
